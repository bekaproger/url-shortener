<?php

namespace Tests\Unit;

use App\Services\UrlService;
use App\User;
use App\Url;
use Illuminate\Http\Request;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class UrlTest extends TestCase
{

    use RefreshDatabase;

    protected $valid_url = 'https://google.com';
    protected $invalid_url;
    protected $user;
    protected $urlService;
    /**
     * A basic unit test example.
     *
     * @return void
     */

    public function setUp(): void
    {
        parent::setUp(); //TODO: Change the autogenerated stub
        $this->user = factory(User::class, 1)->create()->first();
        $this->urlService = new UrlService();
    }

    public function makeUrl($expired = false, $valid = true)
    {
        $url_address = $valid?$this->valid_url:'https://somenotexistingurladdressfortesting.com';
        $data = [
            'url' => $url_address
        ];

        if($expired){
            $data['expiration'] = now()->subDay();
        }

        $request = new Request();
        $request->replace($data);
        $request->setUserResolver(function(){
            return $this->user;
        });
        return $this->urlService->handleUrl($request);
    }


    public function test_handle_url_method_creates_url()
    {
        $url = $this->makeUrl();
        $this->assertInstanceOf(Url::class, $url);
    }

    public function tesT_handle_url_method_returns_exception_id_url_is_invalid()
    {
        $this->expectExceptionCode(422);
        $this->makeUrl(false, false);
    }

    public function test_get_url_method_returns_url()
    {
        $url = $this->makeUrl();
        $count = $url->count;
        $url = $this->urlService->getUrl($url->short_code);

        $this->assertInstanceOf(Url::class, $url);
        $this->assertEquals($url->count, $count + 1);

    }

    public function test_get_url_method_returns_exception_for_expired_url()
    {
        $url = $this->makeUrl(true);

        $this->expectException(\Exception::class);
        $this->expectExceptionCode(400);
        $res = $this->urlService->getUrl($url->short_code);
    }

    public function test_get_url_returns_exception_if_url_not_found()
    {
        $not_existing_short_code = 'RANDOM';
        $this->expectExceptionCode(404);
        $this->urlService->getUrl($not_existing_short_code);
    }

    public function test_is_expired_method()
    {
        $url = $this->makeUrl(false);

        $res = $this->urlService->isExpired($url);
        $this->assertFalse($res);

        $url = $this->makeUrl(true);
        $res = $this->urlService->isExpired($url);
        $this->assertTrue($res);
    }


}

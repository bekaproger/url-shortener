<?php

namespace Tests\Feature;

use App\User;
use App\Url;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class UrlServiceTest extends TestCase
{

    use RefreshDatabase;

    protected $valid_url;
    protected $invalid_url;
    protected $user;
    /**
     * A basic unit test example.
     *
     * @return void
     */

    public function setUp(): void
    {
        parent::setUp(); //TODO: Change the autogenerated stub
        $this->user = factory(User::class, 1)->create()->first();
        $this->valid_url = 'https://google.com';
    }

    public function requestPost($data)
    {
        return $this->actingAs($this->user)->post('/url/', $data);
    }

    public function test_user_can_create_url()
    {
        $data = [
            'url' => $this->valid_url,
        ];

        $response = $this->requestPost($data);
        $response->assertStatus(302);
        $response->assertSessionHasNoErrors();

    }

    public function  test_uer_can_create_url_with_expiring_time()
    {
        $data = [
            'url' => $this->valid_url,
            'expiration' => now()
        ];

        $response = $this->requestPost($data);
        $response->assertStatus(302);
        $response->assertSessionHasNoErrors();

    }


    public function test_user_cant_crate_invalid_url()
    {;
        $data = [
            'url' => 'htpps://dfvdbdgbdgngwgnsgnsgbsdgbdsfbdsfb.com',
            'expiration' => ''
        ];

        $response = $this->requestPost($data);
        $response->assertStatus(302);
        $response->assertSessionHasErrors(['url']);
    }

    public function test_expired_url_returns_exception()
    {
        $data = [
            'url' => $this->valid_url,
            'expires_in' => now()->subDay(),
            'expires' => true,
            'short_code' => 'AAAAAA',
            'count' => 0,
            'user_id' => $this->user->id
        ];

        $url = Url::create($data);

        $res = $this->get($url->short_code);
        $res->assertStatus(400);
    }

    public function test_not_existing_url_returns_404()
    {
        $res = $this->get('/RANDOM');

        $res->assertStatus(404);
    }

}